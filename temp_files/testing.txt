@app.route("/funds", methods=["GET", "POST"])
@login_required
def funds():
    if request.method == "POST":
        amount = request.form.get("amount")
        if not amount or float(amount) < 1:
            return apology("no amount")
        else:
            db.execute("UPDATE users SET cash = cash + ? WHERE id = ?", amount, session["user_id"])
            flash("Funds Added")
            return redirect("/")
    else:
        return render_template("funds.html")


@app.route("/")
@login_required
def index():
    """Show portfolio of stocks"""
    if db.execute("SELECT * FROM Portfolios WHERE UserId= ?", session["user_id"]):
        transactions = db.execute("SELECT * FROM Portfolios WHERE UserId= ?", session["user_id"])
        i = db.execute("SELECT cash FROM users WHERE id = ?", session["user_id"])
        cash = [d["cash"] for d in i]
        l = db.execute("SELECT SUM(Cost) FROM Portfolios WHERE UserId= ?", session["user_id"])
        cost = [d["SUM(Cost)"] for d in l]
        total = cost[0] + cash[0]

        return render_template("index.html", transactions=transactions, cash=cash[0], total=total)
    else:
        return render_template("index.html")


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""

    quote = {}

    if request.method == "POST":
        # Check if user input symbol, then store the symbol in quote
        if not request.form.get("symbol"):
            return apology("no symbol provided", 400)
        else:
            symbol = request.form.get("symbol")

        # Chesk if shares has value and > 1
        if not request.form.get("shares"):
            return apology("missing shares", 400)
        elif not (request.form.get("shares")).isnumeric():
            return apology("must be number", 400)
        elif int(request.form.get("shares")) < 1:
            return apology("must be atleast 1")
        else:
            shares = int(request.form.get("shares"))

        # Look up symbol and check if symbol exists
        if not lookup(symbol):
            return apology("symbol not found", 400)
        else:
            quote = lookup(symbol)

        # Calculates the total for the purchase
        cost = shares * quote["price"]
        l = db.execute("SELECT cash FROM users WHERE id = ?", session["user_id"])
        assets = [d["cash"] for d in l]

        # Checks if user has the cash for transaction, then executes the purchase
        if assets[0] - cost < 0:
            return apology("can't afford", 400)
        else:
            balance = assets[0] - cost
            # Updates users balance
            db.execute("UPDATE users SET cash = ? WHERE id = ?", balance, session["user_id"])
            # If user has already has shares of the stock update entry else create new entry
            test = db.execute("SELECT Symbol FROM Portfolios WHERE UserId = ?", session["user_id"])
            testList = [d["Symbol"] for d in test]
            if symbol in testList:
                db.execute("UPDATE Portfolios SET Shares = Shares + ?, Price = ?, Cost = Cost + ? WHERE UserId = ? AND Symbol = ?",
                 shares, quote["price"], cost, session["user_id"], symbol)
            else:
                db.execute("INSERT INTO Portfolios (UserId, Symbol, StockName, Shares, Price, Cost) VALUES(?, ?, ?, ?, ?, ?)",
                 session["user_id"], symbol, quote["name"], shares, quote["price"], cost)

            # Inputs transaction into transaction db
            db.execute("INSERT INTO Transactions (UserId, Symbol, StockName, BuySell, Shares, Price, Cost, TransactionDate) VALUES(?, ?, ?, ?, ?, ?, ?, ?)",
             session["user_id"], symbol, quote["name"], "Buy", shares, quote["price"], cost, datetime.now())
            # Return user to main page
            flash("Bought")
            return redirect("/")

    else:
        return render_template("buy.html")


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    transactions = db.execute("SELECT * FROM Transactions WHERE UserId= ?", session["user_id"])

    return render_template("history.html", transactions=transactions)


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""
    quote = {}
    symbols = db.execute("SELECT Symbol FROM Portfolios WHERE UserId= ?", session["user_id"])

    if request.method == "POST":
        if not request.form.get("shares"):
            return apology("missing shares")

        if not request.form.get("symbol"):
            return apology("missing symbol")

        shares = int(request.form.get("shares"))
        symbol = request.form.get("symbol")

        # Check if user has enough shares
        i = db.execute("SELECT Shares FROM Portfolios WHERE UserId = ? AND Symbol = ?", session["user_id"], symbol)
        sharesHas = [d["Shares"] for d in i]

        if sharesHas[0] < shares:
            return apology("too many shares")

        else:
            # Get quote
            quote = lookup(symbol)

            # Get users balance
            cost = shares * quote["price"]
            l = db.execute("SELECT cash FROM users WHERE id = ?", session["user_id"])
            assets = [d["cash"] for d in l]
            balance = assets[0] + cost
            db.execute("UPDATE users SET cash = ? WHERE id = ?", balance, session["user_id"])

            # Inputs transaction into transaction db
            db.execute("INSERT INTO Transactions (UserId, Symbol, StockName, BuySell, Shares, Price, Cost, TransactionDate) VALUES(?, ?, ?, ?, ?, ?, ?, ?)",
             session["user_id"], symbol, quote["name"], "Sell", shares, quote["price"], cost, datetime.now())

            if sharesHas[0] - shares == 0:
                db.execute("DELETE row FROM Portfolios WHERE UserId = ? AND Symbol = ?", session["user_id"], symbol)

            else:
                db.execute("UPDATE Portfolios SET Shares = Shares - ?, Price = ?, Cost = Cost - ? WHERE UserId = ? AND Symbol = ?",
                 shares, quote["price"], cost, session["user_id"], symbol)
            # Flash sold to the user
            flash("Sold")
            # Return user to main page
            return redirect("/")

    else:
        return render_template("sell.html", symbols=symbols)


CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, username TEXT NOT NULL, hash TEXT NOT NULL);
CREATE TABLE sqlite_sequence(name,seq);
CREATE UNIQUE INDEX username ON users (username);


<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Category</th>
            <th>Totals</th>
            <th>Budget</th>
            {% for month in months %}
            <th>{{ month }}</th>
            {% endfor %}
        </tr>
    </thead>
    <tbody>
        {% for expense in expenses %}
        <tr>
            <td>{{ expense.category }}</td>
            <td>{{ expense.total }}</td>
            <td>{{ expense.budget }}</td>
    </tbody>
</table>


                            <li class="nav-item"><a class="nav-link" href="{{ url_for('') }}">Buy</a></li>
                            <li class="nav-item"><a class="nav-link" href="{{ url_for('') }}">Sell</a></li>
                            <li class="nav-item"><a class="nav-link" href="{{ url_for('') }}">History</a></li>
                            <li class="nav-item"><a class="nav-link" href="{{ url_for('') }}">Add Funds</a></li>



            <div class="col-auto my-4">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="can_edit">
                    <label class="form-check-label" for="can_edit">Edit types</label>
                </div>
            </div>


                            {% if row.category %}
                                <td><input class="form-control" type="text" name="type_input" placeholder="Type" data-id="{{ row.id }}" value="{{ row.category }}" readonly></td>
                            {% else %}
                                <td><input class="form-control" type="text" name="type_input" placeholder="Type" data-id="{{ row.id }}" readonly></td>
                            {% endif %}     


    fetch('/categories', {
        method : 'POST',
        ContentType : 'application/json',
        body : JSON.stringify(data)
    })
    .then(function(response) {
        if(response.ok) {
            response.json()
            .then(function(response) {
                console.log(response);
            });
        }
        else {
            throw Error('Something went wrong');
        }
    })
    .catch(function(error) {
        console.log(error);
    });



    document.getElementById("submit_types").addEventListener("click", function() {
    var x = document.getElementById("transaction_table").elements.namedItem("type_input");
    var data = [];
    for (var i = 0; i < x.length; i++) {
        data[i] = {id: x[i].dataset.id, type: x[i].value};
    }
    console.log(data)
});

    var b = e.currenttarget.value;



document.addEventListener("change", (e) => {
    var type = e.target;
    data = {id : type.dataset.id, type : type.value};
    if (data['id']){
        console.log(data)
        const categories_url = "/categories"
        fetch(categories_url, {
            headers : {
                'Content-Type' : 'application/json'
            },
            method : 'POST',
            body : JSON.stringify(data)
        })
        .then(function(response) {
            if(response.ok) {
                response.json()
                .then(function(response) {
                    console.log(response);
                });
            }
            else {
                throw Error('Something went wrong');
            }
        })
        .catch(function(error) {
            console.log(error);
        });
    }
});

            <div class="col-auto my-3" style="background-color: rgb(6, 48, 84);">
                <data value="123">
                    <time datetime="2023-01-28 20:33:34"></time>
                    <input type="text" value="testing">
                </data>
            </div>



                                    <option selected disabled>Sort</option>
                        <option value="1">Date</option>
                        <option value="2">Amount</option>
                        <option value="3">Type</option>


            <button type="button" class="btn btn-outline-primary p-0  btn-sm" id="addcategory">
                <i class="bi bi-plus-lg"></i>
            </button>

            .bi-plus-lg {
    font-size: 2rem; 
    line-height: 2rem;
}


        <div class="col-auto" style="background-color: rgb(215, 121, 121);">
            <button type="button" class="btn btn-outline-primary p-0 btn-sm" style="line-height: 16px" id="addcategory2">
                <i class="bi bi-plus-square text-primary" style="font-size: 34px;"></i>
            </button>

        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-outline" id="addcategory3">
                <i class="bi bi-plus-square text-primary"></i>
            </button>

        </div>


            var x = document.getElementById("categorytable").rows;
    let len = x.length;
    x[len].insertCell(category)

    console.log(x, len);